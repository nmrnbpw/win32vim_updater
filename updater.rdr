バイナリリーダーとは
	自分が［ファイル］から［指定バイト数］バイトを読込む手順：配列
		（ファイルから[指定バイト数]だけ一括で読み取ったもの）から，すべて読み取ったものを返す
	終わり
	
	自分が［ファイル］から［指定バイト数］バイトを整数として読込む手順：整数
		ファイルから指定バイト数バイトを読込んだものをデータリストに代入する
		結果＝0
		データリストの個数回，インデックスにカウントしながら繰り返す
			ーーリトルエンディアンなので逆から読込む
			データ＝データリスト（データリストの個数－インデックス＋1）
			結果＝データを（データリストの個数－インデックス）＊8だけ左シフトしたものと結果の論理和
		繰り返し終わり
		結果を返す
	終わり
	
	自分が［ファイル］から［指定バイト数］バイトを長整数として読込む手順：長整数
		ファイルから指定バイト数バイトを読込んだものをデータリストに代入する
		【結果：長整数】＝0
		データリストの個数回，インデックスにカウントしながら繰り返す
			ーーリトルエンディアンなので逆から読込む
			データ＝データリスト（データリストの個数－インデックス＋1）
			【シフト済み：長整数】＝データを（データリストの個数－インデックス）＊8だけ左シフトする
			ーー結果とシフト済みの論理和を結果に代入する
			結果とシフト済みを足したものを結果に代入する
		繰り返し終わり
		結果を返す
	終わり
終わり

COFFファイルヘッダー構造とは
	バイナリリーダーを継承する
	
	＋署名：配列
	＋マシン
	＋セクション数
	＋タイムスタンプ
	＋シンボルテーブル
	＋シンボル数
	＋オプションヘッダーサイズ
	＋プロパティ
	
	はじめ（ファイル）の手順
		
		ーー署名
		ファイルから4バイトを読込む
			もし，それ（1）が「P」の文字番号かつ，それ（2）が「E」の文字番号かつ，それ（3）が0かつ，それ（4）が0でないなら
				「COFF形式ではありません。」というエラーを発生させる
			もし終わり
			それを署名に代入する

		ーーマシン
		ファイルから2バイトを整数として読込む
			それをマシンに代入する
			
		ーーセクション数
		ファイルから2バイトを整数として読込む
			それをセクション数に代入する
			
		ーータイムスタンプ
		ファイルから4バイトを整数として読込む
			それをタイムスタンプに代入する
			
		ーーシンボルテーブル
		ファイルから4バイトを整数として読込む
			それをシンボルテーブルに代入する
			
		ーーシンボル数
		ファイルから4バイトを整数として読込む
			それをシンボル数に代入する
			
		ーーオプションヘッダーサイズ
		ファイルから2バイトを整数として読込む
			それをオプションヘッダーサイズに代入する
			
		ーープロパティ
		ファイルから2バイトを整数として読込む
			それをプロパティに代入する
	終わり
終わり

ヘッダー標準フィールド構造とは
	バイナリリーダーを継承する

	＋マジック
	＋リンカーメジャーバージョン
	＋リンカーマイナーバージョン
	＋コードサイズ
	＋初期化済みデータサイズ
	＋未初期化データサイズ
	＋エントリーポイント
	＋ベースコード
	ーーPE32のみ
	＋ベースデータ
	
	はじめ（ファイル）の手順
		ーーマジック
		ファイルから2バイトを整数として読込む
			もし，（それが0x010B）または（それが0x020B）でないなら
				「予期しないマジックナンバーです。」というエラーを発生させる
			もし終わり
			それをマジックに代入する
			
		ーーリンカーメジャーバージョン
		ファイルから1バイトを整数として読込む
			それをリンカーメジャーバージョンに代入する
			
		ーーリンカーマイナーバージョン
		ファイルから1バイトを整数として読込む
			それをリンカーマイナーバージョンに代入する
			
		ーーコードサイズ
		ファイルから4バイトを整数として読込む
			それをコードサイズに代入する
			
		ーー初期化済みデータサイズ
		ファイルから4バイトを整数として読込む
			それを初期化済みデータサイズに代入する
			
		ーー未初期化データサイズ
		ファイルから4バイトを整数として読込む
			それを未初期化データサイズに代入する
			
		ーーエントリーポイント
		ファイルから4バイトを整数として読込む
			それをエントリーポイントに代入する
			
		ーーベースコード
		ファイルから4バイトを整数として読込む
			それをベースコードに代入する
			
		ーーベースデータ（PE32のみ）
		もし，マジックが0x010Bなら
			ファイルから4バイトを整数として読込む
				それをベースデータに代入する
		でなければ
			ベースデータに0を代入する
		もし終わり
	終わり
終わり

WindowsSpecificフィールドPE32構造とは
	バイナリリーダーを継承する
	
	＋イメージベース
	＋セクションアライメント
	＋ファイルアライメント
	＋メジャーOSバージョン
	＋マイナーOSバージョン
	＋メジャーイメージバージョン
	＋マイナーイメージバージョン
	＋メジャーサブシステムバージョン
	＋マイナーサブシステムバージョン
	＋Win32バージョン値
	＋イメージサイズ
	＋ヘッダーサイズ
	＋チェックサム
	＋サブシステム
	＋DLL特性
	＋予約スタックサイズ
	＋コミットスタックサイズ
	＋予約ヒープサイズ
	＋コミットヒープサイズ
	＋ローダーフラグ
	＋RVAサイズ
	
	はじめ（ファイル）の手順
		ーーイメージベース
		ファイルから4バイトを整数として読込む
			それをイメージベースに代入する
		
		ーーセクションアライメント
		ファイルから4バイトを整数として読込む
			それをセクションアライメントに代入する
			
		ーーファイルアライメント
		ファイルから4バイトを整数として読込む
			それをファイルアライメントに代入する
			
		ーーメジャーOSバージョン
		ファイルから2バイトを整数として読込む
			それをメジャーOSバージョンに代入する	
	
		ーーマイナーOSバージョン
		ファイルから2バイトを整数として読込む
			それをマイナーOSバージョンに代入する
			
		ーーメジャーイメージバージョン
		ファイルから2バイトを整数として読込む
			それをメジャーイメージバージョンに代入する
			
		ーーマイナーイメージバージョン
		ファイルから2バイトを整数として読込む
			それをマイナーイメージバージョンに代入する
			
		ーーメジャーサブシステムバージョン
		ファイルから2バイトを整数として読込む
			それをメジャーサブシステムバージョンに代入する
			
		ーーマイナーサブシステムバージョン
		ファイルから2バイトを整数として読込む
			それをマイナーサブシステムバージョンに代入する
		
		ーーWin32バージョン値
		ファイルから4バイトを整数として読込む
			それをWin32バージョン値に代入する
			
		ーーイメージサイズ
		ファイルから4バイトを整数として読込む
			それをイメージサイズに代入する
			
		ーーヘッダーサイズ
		ファイルから4バイトを整数として読込む
			それをヘッダーサイズに代入する
			
		ーーチェックサム
		ファイルから4バイトを整数として読込む
			それをチェックサムに代入する
			
		ーーサブシステム
		ファイルから2バイトを整数として読込む
			それをサブシステムに代入する
	
		ーーDLL特性
		ファイルから2バイトを整数として読込む
			それをDLL特性に代入する
			
		ーー予約スタックサイズ
		ファイルから4バイトを整数として読込む
			それを予約スタックサイズに代入する
			
		ーーコミットスタックサイズ
		ファイルから4バイトを整数として読込む
			それをコミットスタックサイズに代入する
			
		ーー予約ヒープサイズ
		ファイルから4バイトを整数として読込む
			それを予約ヒープサイズに代入する
			
		ーーコミットヒープサイズ
		ファイルから4バイトを整数として読込む
			それをコミットヒープサイズに代入する
			
		ーーローダーフラグ
		ファイルから4バイトを整数として読込む
			それをローダーフラグに代入する
			
		ーーRVAサイズ
		ファイルから4バイトを整数として読込む
			それをRVAサイズに代入する		
	終わり
終わり

WindowsSpecificフィールドPE32プラス構造とは
	バイナリリーダーを継承する
	
	＋イメージベース：長整数
	＋セクションアライメント
	＋ファイルアライメント
	＋メジャーOSバージョン
	＋マイナーOSバージョン
	＋メジャーイメージバージョン
	＋マイナーイメージバージョン
	＋メジャーサブシステムバージョン
	＋マイナーサブシステムバージョン
	＋Win32バージョン値
	＋イメージサイズ
	＋ヘッダーサイズ
	＋チェックサム
	＋サブシステム
	＋DLL特性
	＋予約スタックサイズ
	＋コミットスタックサイズ
	＋予約ヒープサイズ
	＋コミットヒープサイズ
	＋ローダーフラグ
	＋RVAサイズ
	
	はじめ（ファイル）の手順
		ーーイメージベース
		ファイルから8バイトを長整数として読込む
			それをイメージベースに代入する
			
		ーーセクションアライメント
		ファイルから4バイトを整数として読込む
			それをセクションアライメントに代入する
			
		ーーファイルアライメント
		ファイルから4バイトを整数として読込む
			それをファイルアライメントに代入する
			
		ーーメジャーOSバージョン
		ファイルから2バイトを整数として読込む
			それをメジャーOSバージョンに代入する	
	
		ーーマイナーOSバージョン
		ファイルから2バイトを整数として読込む
			それをマイナーOSバージョンに代入する
			
		ーーメジャーイメージバージョン
		ファイルから2バイトを整数として読込む
			それをメジャーイメージバージョンに代入する
			
		ーーマイナーイメージバージョン
		ファイルから2バイトを整数として読込む
			それをマイナーイメージバージョンに代入する
			
		ーーメジャーサブシステムバージョン
		ファイルから2バイトを整数として読込む
			それをメジャーサブシステムバージョンに代入する
			
		ーーマイナーサブシステムバージョン
		ファイルから2バイトを整数として読込む
			それをマイナーサブシステムバージョンに代入する
		
		ーーWin32バージョン値
		ファイルから4バイトを整数として読込む
			それをWin32バージョン値に代入する
			
		ーーイメージサイズ
		ファイルから4バイトを整数として読込む
			それをイメージサイズに代入する
			
		ーーヘッダーサイズ
		ファイルから4バイトを整数として読込む
			それをヘッダーサイズに代入する
			
		ーーチェックサム
		ファイルから4バイトを整数として読込む
			それをチェックサムに代入する
			
		ーーサブシステム
		ファイルから2バイトを整数として読込む
			それをサブシステムに代入する
	
		ーーDLL特性
		ファイルから2バイトを整数として読込む
			それをDLL特性に代入する
			
		ーー予約スタックサイズ
		ファイルから8バイトを整数として読込む
			それを予約スタックサイズに代入する
			
		ーーコミットスタックサイズ
		ファイルから8バイトを整数として読込む
			それをコミットスタックサイズに代入する
			
		ーー予約ヒープサイズ
		ファイルから8バイトを整数として読込む
			それを予約ヒープサイズに代入する
			
		ーーコミットヒープサイズ
		ファイルから8バイトを整数として読込む
			それをコミットヒープサイズに代入する
			
		ーーローダーフラグ
		ファイルから4バイトを整数として読込む
			それをローダーフラグに代入する
			
		ーーRVAサイズ
		ファイルから4バイトを整数として読込む
			それをRVAサイズに代入する		
	終わり
終わり

イメージデータディレクトリ構造とは
	バイナリリーダーを継承する
	
	＋アドレス
	＋サイズ
	
	はじめ（ファイル）の手順
		ーーアドレス
		ファイルから4バイトを整数として読込む
			それをアドレスに代入する
			
		ーーサイズ
		ファイルから4バイトを整数として読込む
			それをサイズに代入する
	終わり
終わり

ヘッダーデータディレクトリ構造とは
	バイナリリーダーを継承する
	
	＋エクスポートテーブル：イメージデータディレクトリ構造
	＋インポートテーブル：イメージデータディレクトリ構造
	＋リソーステーブル：イメージデータディレクトリ構造
	＋例外テーブル：イメージデータディレクトリ構造
	＋証明書テーブル：イメージデータディレクトリ構造
	＋ベース再配置テーブル：イメージデータディレクトリ構造
	＋デバッグ：イメージデータディレクトリ構造
	＋アーキテクチャー：イメージデータディレクトリ構造
	＋グローバルポインター：イメージデータディレクトリ構造
	＋TLSテーブル：イメージデータディレクトリ構造
	＋構成ロードテーブル：イメージデータディレクトリ構造
	＋バインド済みインポート：イメージデータディレクトリ構造
	＋インポートアドレステーブル：イメージデータディレクトリ構造
	＋遅延インポート記述子：イメージデータディレクトリ構造
	＋CLRランタイムヘッダー：イメージデータディレクトリ構造
	＋予約済み：イメージデータディレクトリ構造
	
	はじめ（ファイル）の手順
		ーーエクスポートテーブル
		エクスポートテーブルというイメージデータディレクトリ構造（ファイル）を作る
			
		ーーインポートテーブル
		インポートテーブルというイメージデータディレクトリ構造（ファイル）を作る
			
		ーーリソーステーブル
		リソーステーブルというイメージデータディレクトリ構造（ファイル）を作る
			
		ーー例外テーブル
		例外テーブルというイメージデータディレクトリ構造（ファイル）を作る
			
		ーー証明書テーブル
		証明書テーブルというイメージデータディレクトリ構造（ファイル）を作る
			
		ーーベース再配置テーブル
		ベース再配置テーブルというイメージデータディレクトリ構造（ファイル）を作る
			
		ーーデバッグ
		デバッグというイメージデータディレクトリ構造（ファイル）を作る
			
		ーーアーキテクチャー
		アーキテクチャーというイメージデータディレクトリ構造（ファイル）を作る
			
		ーーグローバルポインター
		グローバルポインターというイメージデータディレクトリ構造（ファイル）を作る
			
		ーーTLSテーブル
		TLSテーブルというイメージデータディレクトリ構造（ファイル）を作る
			
		ーー構成ロードテーブル
		構成ロードテーブルというイメージデータディレクトリ構造（ファイル）を作る
			
		ーーバインド済みインポート
		バインド済みインポートというイメージデータディレクトリ構造（ファイル）を作る
		
		ーーインポートアドレステーブル
		インポートアドレステーブルというイメージデータディレクトリ構造（ファイル）を作る
		
		ーー遅延インポート記述子
		遅延インポート記述子というイメージデータディレクトリ構造（ファイル）を作る
		
		ーーCLRランタイムヘッダー
		CLRランタイムヘッダーというイメージデータディレクトリ構造（ファイル）を作る
		
		ーー予約済み
		予約済みというイメージデータディレクトリ構造（ファイル）を作る
	終わり
終わり

セクションテーブルヘッダー構造とは
	バイナリリーダーを継承する
	
	＋名前：文字列＝「」
	＋仮想サイズ
	＋仮想アドレス
	＋生データサイズ
	＋生データポインター
	＋ポインター位置
	＋行番号
	＋再配置エントリー数
	＋行番号数
	＋プロパティ
	
	はじめ（ファイル）の手順
		ーー名前
		ファイルから8バイトを読込む
			それを要素へそれぞれ繰り返す
				もし，要素が0x00なら
					繰り返しを抜ける
				もし終わり
				名前＝「［名前］［要素のキャラクタ］」
			繰り返し終わり
		
		ーー仮想サイズ
		ファイルから4バイトを整数として読込む
			それを仮想サイズに代入する
		
		ーー仮想アドレス
		ファイルから4バイトを整数として読込む
			それを仮想アドレスに代入する
			
		ーー生データサイズ
		ファイルから4バイトを整数として読込む
			それを生データサイズに代入する
			
		ーー生データポインター
		ファイルから4バイトを整数として読込む
			それを生データポインターに代入する
			
		ーーポインター位置
		ファイルから4バイトを整数として読込む
			それをポインター位置に代入する
			
		ーー行番号
		ファイルから4バイトを整数として読込む
			それを行番号に代入する
			
		ーー再配置エントリー数
		ファイルから2バイトを整数として読込む
			それを再配置エントリー数に代入する
			
		ーー行番号数
		ファイルから2バイトを整数として読込む
			それを行番号数に代入する
			
		ーープロパティ
		ファイルから4バイトを整数として読込む
			それをプロパティに代入する
	終わり
終わり

セクションテーブル構造とは
	＋テーブル：セクションテーブルヘッダー構造の配列
	
	はじめ（セクション数，ファイル）の手順
		セクション数回，インデックスにカウントしながら繰り返す
			テーブル（インデックス）は，セクションテーブルヘッダー構造（ファイル）を作ったもの
		繰り返し終わり
	終わり
終わり

実行可能ファイル構造とは
	＋COFFファイルヘッダー：COFFファイルヘッダー構造
	＋ヘッダー標準フィールド：ヘッダー標準フィールド構造
	＋PE32：WindowsSpecificフィールドPE32構造
	＋PE32プラス：WindowsSpecificフィールドPE32プラス構造
	＋ヘッダーディレクトリ：ヘッダーデータディレクトリ構造
	＋セクションテーブル：セクションテーブル構造
終わり

実行可能ファイルとは
	バイナリリーダーを継承する

	－ファイルパス＝「」
	＋実行可能ファイル

	はじめの手順
		ーー
	終わり
	
	自分が［パス］を開く手順
		もし，パスというファイルが存在しないなら
			「指定のファイル: ［パス］ が見つかりません。」というエラーを発生させる
		もし終わり
		
		これのファイルパス＝パス
		
		読込みファイルというバイナリファイルを作る
		読込みファイルへパスを読み取り専用で開く
		
		ーーマジックナンバー: MZ
		読込みファイルから2バイトを読込む
			ーーもし，それ（１）が0x4Dかつそれ（２）が0x5Aでないなら
			もし，（それ（1）が「M」の文字番号かつ，それ（2）が「Z」の文字番号）でないなら
				「EXEファイルではないか，解析できない形式です。」というエラーを発生させる
			もし終わり
		
		読込みファイルを0x3Cへ移動する
		読込みファイルから4バイトを整数として読込む
			読込みファイルをそれへ移動する
			
		実行可能ファイルとして実行可能ファイル構造を作る		
		COFFファイルヘッダー構造（読込みファイル）を作る。それを実行可能ファイルのCOFFファイルヘッダーに代入する
		ヘッダー標準フィールド構造（読込みファイル）を作る。それを実行可能ファイルのヘッダー標準フィールドに代入する
		WindowsSpecificフィールドPE32プラス構造（読込みファイル）を作る。それを実行可能ファイルのPE32プラスに代入する
		ヘッダーデータディレクトリ構造（読込みファイル）を作る。それを実行可能ファイルのヘッダーディレクトリに代入する
		セクションテーブル構造（実行可能ファイルのCOFFファイルヘッダーのセクション数，読込みファイル）を作る。それを実行可能ファイルのセクションテーブルに代入する
			
		読込みファイルを閉じる
	終わり

	自分が［ファイル］を解析する手順
		
	終わり
終わり

メイン画面を表示する
待機する
メイン画面とは
	ウィンドウを継承する
	
	－EXEファイルパス
	
	はじめの手順
		初期化する
		ーー貼り付けた部品に対する操作をここに書きます
	終わり
	初期化する手順
	ーー自動生成された手順です。ここにプログラムを書き加えても消える場合があります
		この内容を「メイン画面」に変える
		初期化開始する
		ログテキストというテキスト領域を作る
			その位置と大きさを｛12,118,260,131｝に変える
			その折り返しを○に変える
			その読み取り専用を○に変える
			その移動順を1に変える
			その背景色を「オブジェクト」に変える
		フレーム1というフレームを作る
			その位置と大きさを｛12,12,260,100｝に変える
			その内容を「フレーム1」に変える
			その移動順を2に変える
			参照ボタンというボタンをフレーム1へ作る
				その位置と大きさを｛179,16,75,23｝に変える
				その内容を「参照(O)...」に変える
				その移動順を3に変える
			パステキストというテキストをフレーム1へ作る
				その位置と大きさを｛6,18,167,19｝に変える
				その読み取り専用を○に変える
				その移動順を1に変える
				その背景色を「オブジェクト」に変える
			テキスト1というテキストをフレーム1へ作る
				その位置と大きさを｛6,75,248,19｝に変える
				その読み取り専用を○に変える
				その移動順を2に変える
				その背景色を「オブジェクト」に変える
		初期化終了する
終わり
	開いた時の手順
		参照ボタンがクリック
	
		パステキストの内容をEXEファイルパスにする
		
		ーー例外監視
			EXEファイルという実行可能ファイルを作る
			ーーこのEXEファイルパスを報告する
				それがEXEファイルパスを開く
		ーー発生した場合
		/*
			エラーの番号について分岐
			201の場合
				「指定のファイル: ［パス］ は存在しません。」と警告アイコンで表示する
				終了
			他の場合
				エラーのメッセージを警告アイコンで表示する
				終了
			分岐終わり		
		*/
		ーー監視終わり

		EXEファイルの実行可能ファイルのセクションテーブルのテーブルをセクションへそれぞれ繰り返す
			セクションの名前をログ追記する
			「0x［セクションの生データポインターの十六進数］（0x［セクションの生データサイズの十六進数］（［セクションの生データサイズ］））」をログ追記する
		繰り返し終わり

		テキスト1の内容を「に」にする。
	終わり

	参照ボタンがクリックされた時の手順
		開く画面のフィルタを「実行可能ファイル|*.exe|すべてのファイル|*.*」に変える
		ファイル名は，開くファイルを選択したもの
		もしファイル名が無でなければ
			EXEファイルパス＝ファイル名
		もし終わり
	終わり
	
	自分が［テキスト］をログ追記する手順
		もし，ログテキストの内容の文字数が0以下なら
			ログテキストの内容をテキストにする
			手順を抜け出す
		もし終わり
		ログテキストの内容を（ログテキストの内容＆[改行]＆テキスト）にする
	終わり
終わり

